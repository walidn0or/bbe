{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [
    {
      "source": "/:path*",
      "headers": [
        {
          "key": "X-DNS-Prefetch-Control",
          "value": "on"
        },
        {
          "key": "Strict-Transport-Security",
          "value": "max-age=63072000; includeSubDomains; preload"
        },
        {
          "key": "X-Frame-Options",
          "value": "SAMEORIGIN"
        },
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        },
        {
          "key": "Referrer-Policy",
          "value": "strict-origin-when-cross-origin"
        },
        {
          "key": "Permissions-Policy",
          "value": "camera=(), microphone=(), geolocation=()"
        }
      ],
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
    },
    {
      "source": "/videos/:path*.mp4",
      "headers": [
        {
          "key": "Content-Type",
          "value": "video/mp4"
        },
        {
          "key": "Content-Disposition",
          "value": "inline"
        },
        {
          "key": "Accept-Ranges",
          "value": "bytes"
        }
      ],
      "regex": "^/videos(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?\\.mp4(?:/)?$"
    },
    {
      "source": "/videos/:path*.mov",
      "headers": [
        {
          "key": "Content-Type",
          "value": "video/quicktime"
        },
        {
          "key": "Content-Disposition",
          "value": "inline"
        },
        {
          "key": "Accept-Ranges",
          "value": "bytes"
        }
      ],
      "regex": "^/videos(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?\\.mov(?:/)?$"
    },
    {
      "source": "/images/videos/:path*.mp4",
      "headers": [
        {
          "key": "Content-Type",
          "value": "video/mp4"
        },
        {
          "key": "Content-Disposition",
          "value": "inline"
        },
        {
          "key": "Accept-Ranges",
          "value": "bytes"
        }
      ],
      "regex": "^/images/videos(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?\\.mp4(?:/)?$"
    },
    {
      "source": "/images/videos/:path*.mov",
      "headers": [
        {
          "key": "Content-Type",
          "value": "video/quicktime"
        },
        {
          "key": "Content-Disposition",
          "value": "inline"
        },
        {
          "key": "Accept-Ranges",
          "value": "bytes"
        }
      ],
      "regex": "^/images/videos(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?\\.mov(?:/)?$"
    }
  ],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/about",
      "regex": "^/about(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/about(?:/)?$"
    },
    {
      "page": "/about/background",
      "regex": "^/about/background(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/about/background(?:/)?$"
    },
    {
      "page": "/admin",
      "regex": "^/admin(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin(?:/)?$"
    },
    {
      "page": "/admin/about",
      "regex": "^/admin/about(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/about(?:/)?$"
    },
    {
      "page": "/admin/hero",
      "regex": "^/admin/hero(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/hero(?:/)?$"
    },
    {
      "page": "/admin/news",
      "regex": "^/admin/news(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/news(?:/)?$"
    },
    {
      "page": "/admin/programs",
      "regex": "^/admin/programs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/programs(?:/)?$"
    },
    {
      "page": "/admin/testimonials",
      "regex": "^/admin/testimonials(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/testimonials(?:/)?$"
    },
    {
      "page": "/admin/videos",
      "regex": "^/admin/videos(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/videos(?:/)?$"
    },
    {
      "page": "/contact",
      "regex": "^/contact(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contact(?:/)?$"
    },
    {
      "page": "/donate",
      "regex": "^/donate(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/donate(?:/)?$"
    },
    {
      "page": "/donate/success",
      "regex": "^/donate/success(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/donate/success(?:/)?$"
    },
    {
      "page": "/impact",
      "regex": "^/impact(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/impact(?:/)?$"
    },
    {
      "page": "/news",
      "regex": "^/news(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/news(?:/)?$"
    },
    {
      "page": "/privacy",
      "regex": "^/privacy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/privacy(?:/)?$"
    },
    {
      "page": "/programs",
      "regex": "^/programs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/programs(?:/)?$"
    },
    {
      "page": "/terms",
      "regex": "^/terms(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/terms(?:/)?$"
    },
    {
      "page": "/upload",
      "regex": "^/upload(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/upload(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}